[{"/home/ridwan/Projects/football-shop-mern-frontend/src/index.js":"1","/home/ridwan/Projects/football-shop-mern-frontend/src/App.js":"2","/home/ridwan/Projects/football-shop-mern-frontend/src/reportWebVitals.js":"3","/home/ridwan/Projects/football-shop-mern-frontend/src/components/ScrollToTop.js":"4","/home/ridwan/Projects/football-shop-mern-frontend/src/components/Footer.js":"5","/home/ridwan/Projects/football-shop-mern-frontend/src/components/Navbar.js":"6","/home/ridwan/Projects/football-shop-mern-frontend/src/pages/Home.js":"7","/home/ridwan/Projects/football-shop-mern-frontend/src/pages/SignIn.js":"8","/home/ridwan/Projects/football-shop-mern-frontend/src/pages/CheckOut.js":"9","/home/ridwan/Projects/football-shop-mern-frontend/src/pages/SignUp.js":"10","/home/ridwan/Projects/football-shop-mern-frontend/src/pages/Purchases.js":"11","/home/ridwan/Projects/football-shop-mern-frontend/src/pages/Profile.js":"12","/home/ridwan/Projects/football-shop-mern-frontend/src/api/api.js":"13","/home/ridwan/Projects/football-shop-mern-frontend/src/api/env.js":"14","/home/ridwan/Projects/football-shop-mern-frontend/src/components/Overlay.js":"15","/home/ridwan/Projects/football-shop-mern-frontend/src/api/auth.js":"16","/home/ridwan/Projects/football-shop-mern-frontend/src/components/notifications/success.js":"17","/home/ridwan/Projects/football-shop-mern-frontend/src/components/notifications/alert.js":"18","/home/ridwan/Projects/football-shop-mern-frontend/src/components/notifications/spinner.js":"19","/home/ridwan/Projects/football-shop-mern-frontend/src/pages/routes.js":"20","/home/ridwan/Projects/football-shop-mern-frontend/src/pages/Cart.js":"21","/home/ridwan/Projects/football-shop-mern-frontend/src/pages/Listing.js":"22","/home/ridwan/Projects/football-shop-mern-frontend/src/pages/Description.js":"23","/home/ridwan/Projects/football-shop-mern-frontend/src/components/EcommerceGridVertical.js":"24","/home/ridwan/Projects/football-shop-mern-frontend/src/redux/slices/ProfileSlice.js":"25","/home/ridwan/Projects/football-shop-mern-frontend/src/redux/slices/CartSlice.js":"26","/home/ridwan/Projects/football-shop-mern-frontend/src/redux/slices/ProductSlice.js":"27","/home/ridwan/Projects/football-shop-mern-frontend/src/redux/slices/NotificationSlice.js":"28","/home/ridwan/Projects/football-shop-mern-frontend/src/helper/roundOff.js":"29","/home/ridwan/Projects/football-shop-mern-frontend/src/redux/store.js":"30"},{"size":726,"mtime":1676530415790,"results":"31","hashOfConfig":"32"},{"size":820,"mtime":1676530229962,"results":"33","hashOfConfig":"32"},{"size":362,"mtime":1676476678695,"results":"34","hashOfConfig":"32"},{"size":696,"mtime":1676530358305,"results":"35","hashOfConfig":"32"},{"size":1894,"mtime":1676476678683,"results":"36","hashOfConfig":"32"},{"size":5245,"mtime":1676530358281,"results":"37","hashOfConfig":"32"},{"size":4176,"mtime":1676530229962,"results":"38","hashOfConfig":"32"},{"size":5171,"mtime":1676530358305,"results":"39","hashOfConfig":"32"},{"size":7980,"mtime":1676530358305,"results":"40","hashOfConfig":"32"},{"size":5639,"mtime":1676476678695,"results":"41","hashOfConfig":"32"},{"size":8971,"mtime":1676530381062,"results":"42","hashOfConfig":"32"},{"size":12706,"mtime":1676530358317,"results":"43","hashOfConfig":"32"},{"size":1837,"mtime":1676476678675,"results":"44","hashOfConfig":"32"},{"size":248,"mtime":1676476678675,"results":"45","hashOfConfig":"32"},{"size":588,"mtime":1676476678687,"results":"46","hashOfConfig":"32"},{"size":329,"mtime":1676476678675,"results":"47","hashOfConfig":"32"},{"size":271,"mtime":1676476678695,"results":"48","hashOfConfig":"32"},{"size":270,"mtime":1676476678695,"results":"49","hashOfConfig":"32"},{"size":288,"mtime":1676476678695,"results":"50","hashOfConfig":"32"},{"size":1105,"mtime":1676530229962,"results":"51","hashOfConfig":"32"},{"size":9801,"mtime":1676530381062,"results":"52","hashOfConfig":"32"},{"size":2077,"mtime":1676530358317,"results":"53","hashOfConfig":"32"},{"size":12213,"mtime":1676530358317,"results":"54","hashOfConfig":"32"},{"size":4234,"mtime":1676476678683,"results":"55","hashOfConfig":"32"},{"size":3238,"mtime":1676530112013,"results":"56","hashOfConfig":"32"},{"size":4492,"mtime":1676530125814,"results":"57","hashOfConfig":"32"},{"size":2456,"mtime":1676530118421,"results":"58","hashOfConfig":"32"},{"size":655,"mtime":1676476678695,"results":"59","hashOfConfig":"32"},{"size":72,"mtime":1676476678695,"results":"60","hashOfConfig":"32"},{"size":360,"mtime":1676530125806,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gfrgdw",{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"68"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ridwan/Projects/football-shop-mern-frontend/src/index.js",[],"/home/ridwan/Projects/football-shop-mern-frontend/src/App.js",[],"/home/ridwan/Projects/football-shop-mern-frontend/src/reportWebVitals.js",[],["134","135"],"/home/ridwan/Projects/football-shop-mern-frontend/src/components/ScrollToTop.js",["136"],"import { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { selectNotifications, setNotificationStatus } from \"../redux/slices/NotificationSlice\";\n\nfunction ScrollToTop({ history, children }) {\n  const state = useSelector(selectNotifications)\n  const dispatch = useDispatch()\n  useEffect(() => {\n    const unlisten = history.listen(() => {\n      window.scrollTo(0, 0);\n      dispatch(setNotificationStatus(\"inactive\"))\n      console.log({ state })\n    });\n    return () => {\n      unlisten();\n    }\n  }, []);\n\n  return <>{children}</>;;\n}\n\nexport default withRouter(ScrollToTop);","/home/ridwan/Projects/football-shop-mern-frontend/src/components/Footer.js",[],"/home/ridwan/Projects/football-shop-mern-frontend/src/components/Navbar.js",["137"],"import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setProfileNull, selectIsSignedIn } from \"../redux/slices/ProfileSlice\";\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavbarToggler, MDBCollapse, MDBNavItem, MDBNavLink, MDBContainer, MDBIcon } from 'mdbreact';\nimport NavbarBrandImg from \"../assets/navbarBrand.gif\"\nimport \"./Navbar.css\"\nimport { useHistory } from \"react-router-dom\";\nimport { getCookie, setCookie } from '../api/api';\nimport { cookieKey } from '../api/env';\n\nfunction FullPageIntroWithNonFixedNavbar() {\n\n    let history = useHistory();\n\n    let isSignedIn = useSelector(selectIsSignedIn);\n\n    const dispatch = useDispatch()\n    let [state, setState] = useState({\n        collapse: false,\n        isWideEnough: false,\n    })\n\n    function onClick() {\n        let button = document.querySelector('.navbar-toggler');\n        button.classList.toggle('navbar-toggler-special')\n        setState((prevState) => {\n            return {\n                ...prevState,\n                collapse: !prevState.collapse,\n                isSignedIn\n            }\n        });\n    }\n\n    function resetUser(event) {\n\n        const token = getCookie(cookieKey)\n        console.log({ token })\n        alert(\"Log out\")\n        event.preventDefault()\n        dispatch(setProfileNull())\n\n        window.location.reload()\n\n        setCookie(cookieKey, null, 1)\n        setState((prevState) => {\n            return {\n                ...prevState,\n                isSignedIn: false\n            }\n        });\n    }\n\n    useEffect(() => {\n        let button = document.querySelector('.navbar-toggler');\n        button.classList.add('navbar-toggler-special')\n    }, [state]);\n\n    return (\n        <div>\n            <header>\n                <MDBNavbar fixed=\"top\" light expand=\"lg\" className=\"navbar-custom\" >\n                    <MDBContainer>\n                        <MDBNavbarBrand href=\"/\" className=\"text-danger\">\n                            <img className=\"header-img\" src={NavbarBrandImg} alt=\"Firefootball\" />\n                            <strong className=\"d-none d-sm-inline\">GLOBAL FOOTBALL STORE</strong>\n                            <strong className=\"d-inline d-sm-none\" style={{ fontSize: \"17px\" }}>GLOBAL FOOTBALL STORE</strong>\n\n                        </MDBNavbarBrand>\n                        <MDBNavbarToggler size=\"sm\" onClick={onClick} />\n                        <MDBCollapse onClick={onClick} isOpen={state.collapse} navbar className=\"py-3\" >\n                            <MDBNavbarNav right >\n                                <MDBNavItem >\n                                    <MDBNavLink className=\"text-danger\" to=\"/\">Home</MDBNavLink>\n                                </MDBNavItem>\n                                <MDBNavItem>\n                                    <MDBNavLink className=\"text-danger\" to=\"/products/jerseys\">Jerseys</MDBNavLink>\n                                </MDBNavItem>\n                                <MDBNavItem>\n                                    <MDBNavLink className=\"text-danger\" to=\"/products/boots\">Boots</MDBNavLink>\n                                </MDBNavItem>\n                                <MDBNavItem>\n                                    <MDBNavLink className=\"text-danger\" to=\"/products/accessories\">Accessories</MDBNavLink>\n                                </MDBNavItem>\n\n\n                                <MDBNavItem>\n                                    <MDBNavLink className=\"text-danger\" to=\"/purchases\">Purchases</MDBNavLink>\n                                </MDBNavItem>\n                                <MDBNavItem style={{ position: \"relative\", top: \"1vh\" }} className=\"ml-2\">\n                                    <MDBNavLink to=\"/cart\" className=\"d-inline cart-icon\">\n                                        <MDBIcon className=\"text-danger\" icon=\"cart-arrow-down\" />\n                                    </MDBNavLink>\n                                    {\n                                        !isSignedIn &&\n                                        <MDBNavLink to=\"/signIn\" className=\"d-inline\">\n                                            <MDBIcon className=\"text-danger\" icon=\"sign-in-alt\" />\n                                        </MDBNavLink>\n                                    }\n                                    {\n                                        isSignedIn &&\n                                        <MDBIcon className=\"text-danger\" icon=\"sign-out-alt\" onClick={(evt) => { resetUser(evt) }} />\n                                    }\n                                    {\n                                        isSignedIn &&\n                                        <MDBNavLink to=\"/profile\" className=\"d-inline\">\n                                            <MDBIcon className=\"text-danger\" far icon=\"user-circle\" />\n                                        </MDBNavLink>\n                                    }\n\n                                </MDBNavItem>\n\n\n\n                            </MDBNavbarNav>\n                        </MDBCollapse>\n                    </MDBContainer>\n                </MDBNavbar>\n            </header>\n        </div >\n    );\n}\n\nexport default FullPageIntroWithNonFixedNavbar;","/home/ridwan/Projects/football-shop-mern-frontend/src/pages/Home.js",[],"/home/ridwan/Projects/football-shop-mern-frontend/src/pages/SignIn.js",["138","139","140"],"import React, { useState } from \"react\";\nimport {\n    MDBContainer, MDBCol, MDBRow, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBBtn\n} from \"mdbreact\";\nimport \"./SignIn.css\"\nimport NavbarBrandImg from \"../assets/navbarBrand.gif\"\nimport { Link } from \"react-router-dom\";\nimport Spinner from \"../components/notifications/spinner\";\nimport AlertPage from \"../components/notifications/alert\";\nimport Success from \"../components/notifications/success\";\nimport { login } from \"../api/auth\";\nimport { setCookie } from \"../api/api\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchProfile, setSignedIn } from \"../redux/slices/ProfileSlice\";\n\nfunction SignIn() {\n\n    // fetch dispatch\n\n    const dispatch = useDispatch()    \n\n    {/* Notification handler */ }\n    // initial value\n    let [notification, setNotification] = useState({\n        loading: false,\n        error: false,\n        success: false\n    })\n\n    {/* Form values handler */ }\n\n    // initial value\n    let [input, setInput] = useState({\n        password: \"\",\n        email: \"\"\n    })\n    // change value\n    let onChange = async (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.id;\n        console.log(input)\n        setInput({\n            ...input,\n            [name]: value\n        });\n    }\n\n\n    {/* Form values submit */ }\n\n    let onSubmit = async (event) => {\n        event.preventDefault();\n        setNotification({\n            loading: false,\n            error: false,\n            success: false\n        })\n        try {\n            setNotification({\n                ...notification,\n                loading: true\n            })\n            let response = await login({\n                password: input.password,\n                email: input.email\n            })\n           \n            console.log({response, notification})\n\n            if (response.success === true) {\n                setCookie(\"signInToken\", response.token, 4)\n                dispatch(setSignedIn());\n        \n                setNotification({\n                    ...notification,\n                    loading: false,\n                    success: true\n                })\n                await dispatch(fetchProfile())\n            } else {\n                setNotification({\n                    ...notification,\n                    loading: false,\n                    error: true\n                })\n            }\n        }\n        catch (error) {\n            setNotification({\n                ...notification,\n                loading: false,\n                error: true\n            })\n        }\n    }\n\n\n    return (\n        <MDBContainer>\n            <div className=\"scaffold\">\n                <MDBRow className=\"my-2\" center>\n                    <MDBCard className=\"mx-auto real-signin-container\">\n                        <MDBCardImage className=\"img-edit\" waves src={NavbarBrandImg} />\n                        <MDBCardTitle className=\"text-align-center\">\n                            <b > GLOBAL SOCCER SHOP </b>\n                        </MDBCardTitle>\n                        <MDBCardBody>\n                            <form>\n                                <MDBRow>\n                                    <MDBCol>\n                                        <label htmlFor=\"email\" className=\"d-block my-3\" > Email address </label>\n                                        <div className=\"input-group my-2\">\n                                            <input type=\"email\" id=\"email\" className=\"form-control py-0\" onChange={(event) => { onChange(event) }} placeholder=\"Enter your email address\" aria-describedby=\"basic-addon1\" />\n                                        </div>\n\n                                        <label htmlFor=\"password\" className=\"d-block my-3\"> Password </label>\n                                        <input type=\"password\" id=\"password\" className=\"form-control my-2\"  onChange={(event) => { onChange(event) }} placeholder=\"Enter your password\" />\n                                        <br />\n                                        <br />\n                                        {notification.loading && <Spinner />}\n                                        {notification.error && <AlertPage text=\"Not signed in\" />}\n                                        {notification.success && <Success text=\"Signed in\" />}\n                                        <div className=\"text-align-center my-3\">\n                                            <MDBBtn outline color=\"amber lighten-1 my-2\" onClick={(event) => { onSubmit(event) }}  > Sign In </MDBBtn>\n                                        </div>\n                                    </MDBCol>\n                                </MDBRow>\n                            </form>\n                            <small>\n                                <Link className=\"text-danger\" to=\"/signUp\" >Don't have an account? Sign up instead.</Link>\n                            </small>\n                        </MDBCardBody>\n                    </MDBCard>\n                </MDBRow >\n            </div>\n        </MDBContainer >\n\n    );\n\n}\n\nexport default SignIn;","/home/ridwan/Projects/football-shop-mern-frontend/src/pages/CheckOut.js",["141","142","143","144"],"import React, { useState, useEffect } from \"react\";\nimport { MDBContainer, MDBCol, MDBRow, MDBCard, MDBCardBody, MDBBtn, MDBTabPane, MDBNav, MDBIcon } from \"mdbreact\";\nimport \"./CheckOut.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectProfileDetails, fetchProfile, editProfile } from \"../redux/slices/ProfileSlice\";\nimport { useHistory } from \"react-router\";\nimport { api } from \"../api/api\";\n\nfunction CheckOut() {\n\n    let user = useSelector(selectProfileDetails)\n    let history = useHistory()\n    const dispatch = useDispatch()\n\n    {/* Form values handler */ }\n\n    // initial value\n    let [input, setInput] = useState({\n        addressFirst: \"\",\n        addressSecond: \"\",\n        creditCardCVV: \"\",\n        creditCardNumber: \"\",\n        changed: false\n    })\n\n    // change value\n    let onChange = async (event) => {\n        const target = event.target;\n        const value = target.value;\n        const name = target.id;\n        console.log(input)\n        if (input.changed) {\n            setInput({\n                ...input,\n                [name]: value\n            });\n        } else {\n            setInput({\n                ...input,\n                changed: true,\n                [name]: value\n            });\n        }\n    }\n\n\n    let updateAddressCard = async () => {\n        if (user.totalPurchase > 0) {\n            if (input.changed) {\n                await dispatch(editProfile({ body: { addressFirst: input.addressFirst, addressSecond: input.addressSecond, creditCardNumber: input.creditCardNumber, creditCardCVV: input.creditCardCVV } }))\n            }\n            const response = await api('POST', 'cart', {\n                mode: 'cors'\n            })\n            console.log({ response })\n            history.replace(\"/purchases\")\n        }\n        else {\n            alert(\"First add a credit card.\")\n        }\n    }\n\n\n    useEffect(() => {\n        let controller = new AbortController();\n        async function fetchData() {\n            try {\n                await dispatch(fetchProfile())\n                setInput({\n                    addressFirst: user.addressFirst,\n                    addressSecond: user.addressSecond,\n                    creditCardCVV: user.creditCardCVV,\n                    creditCardNumber: user.creditCardNumber\n                })\n            } catch (rejectedValueOrSerializedError) {\n                console.log({ failed: rejectedValueOrSerializedError })\n            }\n        }\n\n        try {\n            fetchData()\n        } catch (rejectedValueOrSerializedError) {\n            console.log({ failed: rejectedValueOrSerializedError })\n        }\n        return () => {\n            controller?.abort();\n\n        }\n    }, [user.creditCardNumber])\n\n    return (\n        <MDBContainer className=\"mb-5\">\n            <MDBRow className=\"my-2\" center>\n                <MDBCard className=\"w-100\">\n                    <MDBCardBody>\n                        <MDBRow>\n\n                            <MDBCol md=\"6\" className=\"my-0\">\n\n                                <div>\n                                    <MDBNav pills className=\"amber-text nav-justified\">\n                                        <h3>\n                                            Address of delivery\n                                        </h3>\n                                    </MDBNav>\n                                    <div >\n                                        <label htmlFor=\"addressFirst\" className=\"my-2\">Street Address</label>\n                                        <input type=\"text\" id=\"addressFirst\" className=\"form-control\" onChange={(event) => onChange(event)} value={input.addressFirst} />\n                                        <label htmlFor=\"addressSecond\" className=\"my-2\">City, Address</label>\n                                        <input type=\"text\" id=\"addressSecond\" className=\"form-control\" onChange={(event) => onChange(event)} value={input.addressSecond} />\n                                    </div>\n                                </div>\n                                <MDBNav pills className=\"nav-justified amber-text mt-3\">\n                                    <h3>\n                                        Credit Card\n                                    </h3>\n                                </MDBNav>\n\n                                <div>\n                                    <div className=\"d-flex justify-content-around mb-3\">\n                                        <div className=\"w-50\">\n                                            <label htmlFor=\"cc-number123\">Credit card number</label>\n                                            <input type=\"text\" className=\"form-control\" id=\"creditCardNumber\" onChange={(event) => onChange(event)} value={input.creditCardNumber} required />\n                                        </div>\n                                        <div className=\"w-50\">\n                                            <label htmlFor=\"cc-cvv123\">CVV</label>\n                                            <input type=\"text\" className=\"form-control\" id=\"creditCardCVV\" onChange={(event) => onChange(event)} value={input.creditCardCVV} required />\n\n                                        </div>\n                                    </div>\n\n                                    <div className=\"invalid-feedback\">\n                                        Credit card number is required\n                                    </div>\n\n                                </div>\n                                <MDBBtn color=\"amber lighten-4\" outline size=\"small\" onClick={updateAddressCard} >\n                                    Purchase Items\n                                </MDBBtn>\n                            </MDBCol>\n\n                            <MDBCol lg=\"6\" className=\"my-4\">\n\n                                <MDBCard>\n                                    <MDBCardBody>\n                                        \n                                        <h4 className=\"my-1 text-center text-warning\">Summary</h4>\n                                        <hr />\n                                        <MDBRow>\n                                            <MDBCol sm=\"8\">\n                                                Total Purchases\n                                            </MDBCol>\n                                            <MDBCol sm=\"4\">\n                                                £ {user.totalPurchase}\n                                            </MDBCol>\n                                            <hr />\n                                            <MDBCol sm=\"8\">\n                                                Delivery costs\n                                            </MDBCol>\n                                            <MDBCol sm=\"4\">\n                                                £ {50.00}\n                                            </MDBCol>\n                                            <hr />\n\n                                            <MDBCol sm=\"8\">\n                                                <strong>Total</strong>\n                                            </MDBCol>\n                                            <MDBCol sm=\"4\">\n                                                <strong> £ {user.totalPurchase + 50.00}</strong>\n                                            </MDBCol>\n                                        </MDBRow>\n                                        <br />\n                                        <p className=\"text-amber lighten-1 mb-0\"><i className=\"fas fa-info-circle mr-1\"></i> Do not delay the purchase, adding\n                                            items to your cart does not mean booking them.</p>\n                                    </MDBCardBody>\n\n                                </MDBCard>\n\n                            </MDBCol>\n                        </MDBRow>\n                    </MDBCardBody>\n                </MDBCard>\n            </MDBRow >\n        </MDBContainer >\n    );\n\n}\n\nexport default CheckOut;","/home/ridwan/Projects/football-shop-mern-frontend/src/pages/SignUp.js",["145","146","147","148"],"import React, { useState } from \"react\";\nimport {\n    MDBContainer, MDBCol, MDBRow, MDBCard, MDBCardBody,  MDBCardTitle, MDBBtn\n} from \"mdbreact\";\nimport \"./SignIn.css\"\nimport { Link } from \"react-router-dom\";\n\nimport Spinner from \"../components/notifications/spinner\";\nimport AlertPage from \"../components/notifications/alert\";\nimport Success from \"../components/notifications/success\";\nimport { signup } from \"../api/auth\";\nimport { useHistory } from \"react-router-dom\";\n\n\nfunction SignIn() {\n\n    {/* Notification handler */ }\n    // initial value\n    let [notification, setNotification] = useState({\n        loading: false,\n        error: false,\n        success: false\n    })\n\n    let history = useHistory();\n\n    {/* Form values handler */ }\n\n    // initial value\n    let [input, setInput] = useState({\n        fname: \"\",\n        lname: \"\",\n        password: \"\",\n        email: \"\"\n    })\n    // change value\n    let onChange = async (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        console.log(input)\n        setInput({\n            ...input,\n            [name]: value\n        });\n    }\n\n\n    {/* Form values submit */ }\n\n    let onSubmit = async (event) => {\n        event.preventDefault();\n        setNotification({\n            loading: false,\n            error: false,\n            success: false\n        })\n        try {\n            let response = await signup({\n                name: input.fname.trim() + input.lname.trim(),\n                password: input.password,\n                email: input.email\n            })\n            setNotification({\n                ...notification,\n                loading: true\n            })\n            if (response.success === true) {\n                setNotification({\n                    ...notification,\n                    loading: false,\n                    success: true\n                })\n\n                history.push(\"/\");\n\n            } else {\n                setNotification({\n                    ...notification,\n                    loading: false,\n                    error: true\n                })\n            }\n        }\n        catch (error) {\n            setNotification({\n                ...notification,\n                loading: false,\n                error: true\n            })        }\n    }\n\n    {/* Recaptcha */}\n\n     // initial value\n    \n    return (\n        <MDBContainer>\n            <div className=\"scaffold\">\n                <MDBRow className=\"my-2\" center>\n                    <MDBCard className=\"mx-auto real-signin-container\">\n                        <MDBCardTitle className=\"text-align-center mt-5\">\n                            <b > GLOBAL SOCCER SHOP </b>\n                        </MDBCardTitle>\n                        <MDBCardBody>\n                            <form  >\n                                <MDBRow>\n                                    <MDBCol>\n                                        <label htmlFor=\"fname\" className=\"d-block mb-3\" > First name </label>\n                                        <input type=\"text\" id=\"fname\" name=\"fname\" className=\"form-control\" onChange={(event) => { onChange(event) }} placeholder=\"Enter your first name\" />\n\n                                        <label htmlFor=\"lname\" className=\"d-block my-3\" > Last name </label>\n                                        <input type=\"text\" id=\"lname\" name=\"lname\" className=\"form-control\" onChange={(event) => { onChange(event) }} placeholder=\"Enter your last name\" />\n\n                                        <label htmlFor=\"email\" className=\"d-block my-3\" > Email address </label>\n                                        <div className=\"input-group my-3\">\n                                            <input type=\"email\" id=\"email\" name=\"email\" className=\"form-control py-0\" onChange={(event) => { onChange(event) }} placeholder=\"Enter your email address\" aria-describedby=\"basic-addon1\" />\n                                        </div>\n                                        <label htmlFor=\"password\" className=\"d-block my-3\"> Password </label>\n                                        <div className=\"input-group my-3\">\n                                            <input type=\"password\" id=\"password\" name=\"password\" className=\"form-control\" onChange={(event) => { onChange(event) }} placeholder=\"Enter your password\" />\n                                        </div>\n                                     \n                                        {notification.loading && <Spinner />}\n                                        {notification.error && <AlertPage text=\"Not signed in\"/>}\n                                        {notification.success && <Success text=\"Signed in\"/>}\n                                        <br />\n                                        <br />\n                                        <div className=\"text-align-center\">\n                                            <MDBBtn outline color=\"amber lighten-1\" type=\"submit\" onClick={(event) => { onSubmit(event) }} > Sign Up </MDBBtn>\n                                        </div>\n                                    </MDBCol>\n                                </MDBRow>\n                            </form>\n                            <small>\n                                <Link className=\"text-danger\" to=\"/signIn\">Already have an account? Sign in instead.</Link>\n                            </small>\n                        </MDBCardBody>\n                    </MDBCard>\n                </MDBRow >\n            </div>\n        </MDBContainer >\n\n    );\n\n}\n\nexport default SignIn;","/home/ridwan/Projects/football-shop-mern-frontend/src/pages/Purchases.js",["149","150","151","152","153","154","155","156","157","158","159","160"],"import React, { useState, Fragment, useEffect } from \"react\";\nimport { MDBRow, MDBCard, MDBCardBody, MDBTable, MDBTableBody, MDBTableHead, MDBBtn, MDBCollapse, MDBIcon } from \"mdbreact\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectCart, editProduct, fetchCart, deleteProduct } from \"../redux/slices/CartSlice\";\nimport { useHistory } from \"react-router\";\nimport \"./Cart.css\"\nimport { editProfile } from \"../redux/slices/ProfileSlice\";\nimport { api } from \"../api/api\";\nimport { roundOff } from \"../helper/roundOff\";\n// name, price, imageSrc, type\n// inputs: rate, size, quantity\n\nfunction returnDateFormatted(dateString){\n  var dateObj= new Date(dateString)\n  console.log({dateString, dateObj})\n  var hour = dateObj.getHours();\n  var minutes = dateObj.getMinutes();\n  var seconds = dateObj.getSeconds() ;\n\n  var day = dateObj.getDate();\n  var year = dateObj.getYear();\n  var month = dateObj.getMonth();\n\n  return `Purchased at ${day}/${month}/${year} ${hour}:${minutes}:${seconds}`\n}\n\nfunction deepCopyObj(obj) {\n  if (null == obj || \"object\" != typeof obj) return obj;\n  if (obj instanceof Date) {\n    var copy = new Date();\n    copy.setTime(obj.getTime());\n    return copy;\n  }\n  if (obj instanceof Array) {\n    var copy = [];\n    for (var i = 0, len = obj.length; i < len; i++) {\n      copy[i] = deepCopyObj(obj[i]);\n    }\n    return copy;\n  }\n  if (obj instanceof Object) {\n    var copy = {};\n    for (var attr in obj) {\n      if (obj.hasOwnProperty(attr)) copy[attr] = deepCopyObj(obj[attr]);\n    }\n    return copy;\n  }\n  throw new Error(\"Unable to copy obj this object.\");\n}\nexport default function Purchases() {\n\n  let [data, setData] = useState([{\n    products: [],\n    description: [{ quantity: 0, size: \"\" }],\n    total: 0,\n    paid: false\n  }]);\n  const dispatch = useDispatch();\n  console.log({ data })\n\n  useEffect(() => {\n    // fetch Data\n    async function fetchData() {\n      const response = await api('GET', `cart`, {\n        mode: 'cors',\n      })\n      if (response.cart !== undefined)\n        setData(deepCopyObj(response.cart))\n    }\n\n    let controller = new AbortController();\n    try {\n      fetchData()\n    } catch (rejectedValueOrSerializedError) {\n      console.log({ failed: rejectedValueOrSerializedError })\n    }\n    return () => {\n      controller?.abort();\n\n    }\n  }, [data.length])\n\n  return <>\n    <MDBRow className=\"my-0 special-margin\" center>\n      <MDBCard style={{ marginTop: \"45px\" }}>\n        <MDBCardBody>\n          <h3 className=\"w-100 text-warning my-0 text-center\"> Purchases </h3>\n          <br />\n          {data.map((value, index) => {\n            if (value.status === 'active' && data.length===1) return (\n              <div style={{width: \"60vw\"}}>\n                <p className=\"text-center\">No purchases yet!</p>\n              </div>\n            )\n            if (value.status === 'active') return null\n\n            return (\n              <>\n                {value.paidAt && <p className=\"my-2 text-center\"> {returnDateFormatted(value.paidAt)} </p> }\n                <Cart key={`${value}${index}history`} data={value} />\n              </>\n            )\n          })}\n        </MDBCardBody>\n      </MDBCard>\n    </MDBRow>\n  </>\n}\nexport function Cart({ data }) {\n  /*\n          name, price, imageSrc, type\n          inputs: rate, size, quantity\n      */\n\n\n  // const response = await api('GET', `cart`, {\n  //   mode: 'cors',\n  // })\n\n  let [collapse, setCollapse] = useState(Array(data.length).fill(false));\n  let toggleCollapse = index => () => {\n    setCollapse((prev) => {\n      let newCollapse = [...prev]\n      newCollapse[index] = !prev[index]\n      return newCollapse\n    })\n  }\n  const dispatch = useDispatch();\n  const history = useHistory();\n  let columns = [\n    {\n      label: <strong>Image</strong>,\n      field: 'imageSrc',\n    },\n    {\n      label: <strong>Cart</strong>,\n      field: 'name'\n    },\n    {\n      label: <strong>Size</strong>,\n      field: 'size'\n    },\n    {\n      label: <strong>Price</strong>,\n      field: 'price'\n    },\n    {\n      label: <strong>Quantity</strong>,\n      field: 'quantity'\n    },\n    {\n      label: <strong>Amount</strong>,\n      field: 'amount'\n    },\n  ]\n\n  let total = 0;\n  let rows = []\n  if (data.products) {\n    data.products.forEach((value, index) => {\n      let totalPrice = 0\n      totalPrice = parseFloat(data.description[index].quantity) * parseFloat(value.price)\n      total += totalPrice\n      rows.push(\n        {\n          'imageSrc': <img src={`/assets/${value.type}/${value.image}`} alt=\"\" style={{ width: \"50px\" }} />,\n          'name': <strong> £ {value.name}</strong>,\n          'size': <strong> {data.description[index].size} </strong>,\n          'price': <strong> {roundOff(value.price)} </strong>,\n          'quantity':\n            <input name=\"quantity\" value={data.description[index].quantity} id=\"quantity\" className=\"specialInput border-warning\" style={{ width: \"100px\" }} disabled />,\n          'amount': <strong> £ {totalPrice}</strong>,\n        }\n      )\n    });\n  }\n  let handleInputChange = async (event, index) => {\n    let quantity = parseInt(event.target.value);\n    let size = data.description[index].size\n    console.log({ quantity, size })\n    index = parseInt(index)\n    if (quantity <= 0) {\n      alert(\"value cannot be less than zero\");\n    }\n    else {\n      let body = { size, quantity }\n      let productId = data.products[index]._id\n      // console.log({ size, quantity, productId })\n      let returnValue = await dispatch(editProduct({ productId, index, body })).unwrap()\n      console.log(returnValue)\n\n    }\n  }\n\n  let checkOut = async (totalPurchase) => {\n    if (rows.length === 0) {\n      alert(\"Purchase an item first!\");\n    }\n    else {\n      let returnValue = await dispatch(editProfile({ body: { totalPurchase } })).unwrap()\n      console.log(returnValue)\n      history.replace(\"/checkOut\")\n    }\n  }\n\n  let deleteCart = (index) => {\n    dispatch(deleteProduct(index))\n  }\n\n  return (\n    <div className=\"my-3\">\n\n\n      {/* Table */}\n\n      <MDBTable className=\"product-table d-none d-lg-table w-80\">\n        <MDBTableHead className=\"form-control font-weight-bold purchase\" color=\"amber lighten-5 border-0 border border-warning\" columns={columns} />\n        <MDBTableBody rows={rows} />\n      </MDBTable>\n\n      {/* Table */}\n      <div className=\"px-1\">\n        <div className=\"d-grid d-lg-none w-80 border border-warning py-2\"\n          style={{\n            display: \"grid \", gridTemplateColumns: \"0.5fr 1fr 3fr 1fr\", justifyContent: \"center\",\n            alignItems: \"center\", background: \"#FFF8E1\"\n\n          }}\n        >\n          <span\n          >\n\n          </span>\n          <span>\n            Image\n          </span>\n          <span className=\"px-4\">\n            Name\n          </span>\n          <div\n            className=\"mx-auto\"\n          >\n          </div>\n        </div>\n        {\n          data.products &&\n          data.products[0] !== null &&\n          rows.map((val, index) => {\n\n            return (\n              <Fragment key={`${val}${index}}`} >\n                <div onClick={toggleCollapse(index)} className=\"d-grid d-lg-none w-80 border-top border-bottom border-warning py-2\"\n                  style={{\n                    display: \"grid \", gridTemplateColumns: \"0.5fr 1fr 3fr 1fr\", justifyContent: \"center\",\n                    alignItems: \"center\"\n\n                  }}\n                >\n                  <span\n                  >\n                    <  MDBIcon icon=\"angle-down\" />\n                  </span>\n                  <span>\n                    {val.imageSrc}\n                  </span>\n                  <span>\n                    {val.name}\n\n                  </span>\n                  <div\n                    className=\"mx-auto\"\n                  >\n\n                  </div>\n                </div>\n                <MDBCollapse id=\"basicCollapse\" isOpen={collapse[index]} className=\"py-3 align-items-around\" style={{ height: \"130px\" }}>\n                  <div className=\"pl-5 ml-5\">\n                    <strong> Size: {val.size} </strong>\n                    <br />\n                    <strong> Price: {val.price} </strong>\n                    <br />\n                    <strong> Quantity {val.quantity} </strong>\n                    <br />\n                    <strong> {val.amount}</strong>\n                  </div>\n                </MDBCollapse>\n              </Fragment>\n            )\n          }\n          )\n        }\n      </div>\n      {\n        !data.products ||\n        data.products[0] === null &&\n        <div style={{ textAlign: \"center\" }}>\n          Added nothing to cart !\n        </div>\n\n      }\n      {\n        data.products &&\n        data.products[0] !== null &&\n        <div className=\"pr-5\">\n          <div className=\"mt-3 d-flex justify-content-end\">\n            <strong>TOTAL : &nbsp;</strong>\n            <strong className=\"ml-4\">{roundOff(total)}</strong>\n          </div>\n        </div>\n      }\n    </div >\n  );\n}\n\n\n","/home/ridwan/Projects/football-shop-mern-frontend/src/pages/Profile.js",["161","162","163","164"],"import React, { useEffect, useState }\n    from \"react\";\nimport {\n    MDBContainer, MDBCol, MDBRow, MDBCard, MDBCardBody, MDBNav, MDBTabPane,\n    MDBIcon,\n    MDBAlert\n} from \"mdbreact\";\nimport \"./SignIn.css\"\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectProfileDetails, fetchProfile, editProfile, selectIsSignedIn } from \"../redux/slices/ProfileSlice\";\n\nfunction Profile() {\n    let [user, setUser] = useState(useSelector(selectProfileDetails))\n    let isSignedIn = useState(useSelector(selectIsSignedIn))\n\n    const dispatch = useDispatch()\n    let toggleCollapse1 = (collapseID) => () => {\n        let collapse = document.getElementById(collapseID);\n        collapse.classList.toggle(\"d-none\");\n    }\n\n    {/* Form values handler */ }\n\n    // initial value\n    let [input, setInput] = useState({\n        addressFirst: \"\",\n        addressSecond: \"\",\n        creditCardCVV: \"\",\n        creditCardNumber: \"\"\n    })\n\n    // change value\n    let onChange = async (event) => {\n        const target = event.target;\n        const value = target.value;\n        const name = target.id;\n        console.log(input)\n        setInput({\n            ...input,\n            [name]: value\n        });\n    }\n\n\n    let updateAddress = async () => {\n        let result= await dispatch(editProfile({ body: { addressFirst: input.addressFirst, addressSecond: input.addressSecond } })).unwrap()\n        console.log({result})\n        // wil reset\n        setUser({\n            ...user,\n            addressFirst: input.addressFirst, addressSecond: input.addressSecond\n        })\n    }\n    let updateCard = async () => {\n        let result= await dispatch(editProfile({ body: { creditCardNumber: input.creditCardNumber, creditCardCVV: input.creditCardCVV } }))\n        console.log({result})\n        // wil reset\n        setUser({\n            ...user,\n            creditCardNumber: input.creditCardNumber, creditCardCVV: input.creditCardCVV\n        })\n    }\n    useEffect(() => {\n        let controller = new AbortController();\n        async function fetchData() {\n\n            await dispatch(fetchProfile())\n            setInput({\n                addressFirst: (user.addressFirst === undefined) ? \"\" : user.addressFirst,\n                addressSecond: (user.addressSecond === undefined) ? \"\" : user.addressSecond,\n                creditCardCVV: (user.creditCardCVV === undefined) ? \"\" : user.creditCardCVV,\n                creditCardNumber: (user.creditCardNumber === undefined) ? \"\" : user.creditCardNumber\n            })\n\n        }\n\n        try {\n            fetchData()\n        } catch (rejectedValueOrSerializedError) {\n            console.log({ failed: rejectedValueOrSerializedError })\n        }\n        return () => {\n            controller?.abort();\n\n        }\n    }, [user.creditCardNumber, isSignedIn])\n\n    return (\n        <MDBContainer>\n            <div className=\"scaffold mx-auto\">\n                <MDBRow center>\n                    <MDBCard className=\"mx-auto real-profile-container\">\n                        {/* <MDBCardBody> */}\n                        <form style={{ fontSize: \"16px\" }}>\n                            {/* <MDBTabPane> */}\n\n                            <MDBRow style={{ marginBottom: \"0px\", marginTop: \"0px !important\", fontSize: \"16px\" }}>\n                                <MDBNav pills className=\"mx-auto amber-text my-0 prepostTitle d-flex flex-column justify-content-center\">\n                                    <h2> PERSONAL DETAILS</h2>\n                                </MDBNav>\n                                <MDBCol md=\"12\" className=\"my-0\">\n                                    <label htmlFor=\"name\" className=\"my-2\">Name</label>\n                                    <input type=\"text\" id=\"name\" value={user.name} className=\"form-control\" />\n                                    <label htmlFor=\"role\" className=\"my-2\">Role</label>\n                                    <input type=\"text\" id=\"role\" value={String(user.role)} className=\"form-control\" />\n                                    <label htmlFor=\"email\" className=\"my-2\">Email address</label>\n                                    <input type=\"text\" id=\"email\" className=\"form-control\" value={user.email} placeholder=\"youremail@example.com\" />\n                                </MDBCol>\n\n                            </MDBRow>\n\n                            <MDBRow style={{ marginBottom: \"0px !important\", margnTop: \"0px !important\" }}>\n\n                                <MDBCol md=\"12\">\n                                    <div>\n                                        <MDBNav pills className=\"amber-text nav-justified\">\n                                            <h3>\n                                                <span>Address</span>\n                                                <  MDBIcon icon=\"angle-down\"\n                                                    size=\"sm\"\n                                                    className=\"ml-4\"\n                                                    onClick={toggleCollapse1(\"basicCollapse1\")}\n                                                />\n                                                <  MDBIcon icon=\"save\"\n                                                    size=\"sm\"\n                                                    className=\"ml-4\"\n                                                    onClick={updateAddress}\n                                                />\n                                            </h3>\n                                        </MDBNav>\n                                        <div id=\"basicCollapse1\" className=\"d-none\">\n\n                                            {user.addressFirst === undefined && user.addressSecond === undefined &&\n                                                <>\n                                                    <MDBAlert color=\"info\" dismiss>\n                                                        Address is required! Please add.\n                                                    </MDBAlert>\n                                                    <label htmlFor=\"addressFirst\" className=\"my-2\">Street Address</label>\n                                                    <input type=\"text\" id=\"addressFirst\" className=\"form-control\" onChange={(event) => onChange(event)} value={input.addressFirst} />\n                                                    <label htmlFor=\"addressSecond\" className=\"my-2\">City, Address</label>\n                                                    <input type=\"text\" id=\"addressSecond\" className=\"form-control\" onChange={(event) => onChange(event)} value={input.addressSecond} />\n                                                </>\n                                            }\n                                            {user.addressFirst !== undefined && user.addressSecond !== undefined &&\n                                                <>\n                                                    <label htmlFor=\"addressFirst\" className=\"my-2\">Street Address</label>\n                                                    <input type=\"text\" id=\"addressFirst\" className=\"form-control\" onChange={(event) => onChange(event)} value={input.addressFirst} placeholder={\"Haven't added address yet!\"} />\n                                                    <label htmlFor=\"addressSecond\" className=\"my-2\">City, Address</label>\n                                                    <input type=\"text\" id=\"addressSecond\" className=\"form-control\" onChange={(event) => onChange(event)} value={input.addressSecond} placeholder={\"Add your address.\"} />\n                                                </>\n                                            }\n\n                                        </div>\n                                    </div>\n\n                                </MDBCol>\n                            </MDBRow>\n\n                            <MDBRow style={{ marginBottom: \"0px !important\", margnTop: \"0px !important\" }}>\n                                <MDBCol md=\"12\">\n                                    <MDBNav pills className=\"nav-justified amber-text\">\n                                        <h3>\n                                            <span>Billing</span>\n                                            <MDBIcon icon=\"angle-down ml-3\" size=\"sm\"\n                                                onClick={toggleCollapse1(\"basicCollapse2\")}\n                                            />\n                                            <  MDBIcon icon=\"save\"\n                                                size=\"sm\"\n                                                className=\"ml-4\"\n                                                onClick={updateCard}\n                                            />\n                                        </h3>\n                                    </MDBNav>\n                                    <div id=\"basicCollapse2\" className=\"d-none\">\n\n                                        <div className=\"my-3\">\n\n                                            {user.creditCardNumber === undefined && user.creditCardCVV === undefined &&\n                                                <>\n                                                    <MDBAlert color=\"info\" dismiss>\n                                                        Credit card is required! Please add.\n                                                    </MDBAlert>\n                                                    <div className=\"w-50\">\n                                                        <label htmlFor=\"cc-number123\">Credit card number</label>\n                                                        <input type=\"text\" className=\"form-control\" id=\"creditCardNumber\" onChange={(event) => onChange(event)} value={input.creditCardNumber} placeholder={\"Card Number\"} required />\n                                                    </div>\n                                                    <div className=\"w-50\">\n                                                        <label htmlFor=\"cc-cvv123\">CVV</label>\n                                                        <input type=\"text\" className=\"form-control\" id=\"creditCardCVV\" onChange={(event) => onChange(event)} value={input.creditCVV} placeholder={\"Card CVV\"} required />\n                                                    </div>\n                                                </>\n\n                                            }\n\n                                            {user.creditCardNumber !== undefined && user.creditCardCVV !== undefined &&\n                                                <>\n                                                    <label htmlFor=\"cc-name123\">Name on card</label>\n                                                    <input type=\"text\" className=\"form-control\" id=\"cc-name123\" value={user.name} onChange={()=>{}} required />\n                                                    <br />\n                                                    <small className=\"text-muted\">Full name as displayed on card</small>\n                                                    <br />\n                                                    <div className=\"invalid-feedback\">\n                                                        Name on card is required\n                                                    </div>\n                                                    <div className=\"w-50\">\n                                                        <label htmlFor=\"cc-number123\">Credit card number</label>\n                                                        <input type=\"text\" className=\"form-control\" id=\"creditCardNumber\" onChange={(event) => onChange(event)} value={input.creditCardNumber} required />\n                                                    </div>\n                                                    <div className=\"w-50\">\n                                                        <label htmlFor=\"cc-cvv123\">CVV</label>\n                                                        <input type=\"text\" className=\"form-control\" id=\"creditCardCVV\" onChange={(event) => onChange(event)} value={input.creditCardCVV} required />\n                                                    </div>\n                                                </>\n                                            }\n                                        </div>\n\n                                    </div>\n                                </MDBCol>\n                            </MDBRow>\n\n\n\n                            {/* </MDBTabPane> */}\n                        </form>\n\n                        {/* </MDBCardBody> */}\n                    </MDBCard>\n                </MDBRow >\n            </div>\n        </MDBContainer >\n    );\n\n}\n\nexport default Profile;","/home/ridwan/Projects/football-shop-mern-frontend/src/api/api.js",[],"/home/ridwan/Projects/football-shop-mern-frontend/src/api/env.js",[],"/home/ridwan/Projects/football-shop-mern-frontend/src/components/Overlay.js",[],"/home/ridwan/Projects/football-shop-mern-frontend/src/api/auth.js",[],"/home/ridwan/Projects/football-shop-mern-frontend/src/components/notifications/success.js",[],"/home/ridwan/Projects/football-shop-mern-frontend/src/components/notifications/alert.js",[],"/home/ridwan/Projects/football-shop-mern-frontend/src/components/notifications/spinner.js",[],"/home/ridwan/Projects/football-shop-mern-frontend/src/pages/routes.js",[],"/home/ridwan/Projects/football-shop-mern-frontend/src/pages/Cart.js",["165","166","167"],"import React, { useState, Fragment, useEffect } from \"react\";\nimport { MDBRow, MDBCard, MDBCardBody, MDBTable, MDBTableBody, MDBTableHead, MDBBtn, MDBCollapse, MDBIcon } from \"mdbreact\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectCart, editProduct, fetchCart, deleteProduct } from \"../redux/slices/CartSlice\";\nimport { useHistory } from \"react-router\";\nimport \"./Cart.css\"\nimport { editProfile } from \"../redux/slices/ProfileSlice\";\nimport { roundOff } from \"../helper/roundOff\";\n// name, price, imageSrc, type\n// inputs: rate, size, quantity\n\n\nexport default function Cart() {\n  /*\n          name, price, imageSrc, type\n          inputs: rate, size, quantity\n      */\n\n\n  let data = useSelector(selectCart);\n  let [collapse, setCollapse] = useState(Array(data.length).fill(false));\n  let toggleCollapse = index => () => {\n    setCollapse((prev) => {\n      let newCollapse = [...prev]\n      newCollapse[index] = !prev[index]\n      return newCollapse\n    })\n  }\n  const dispatch = useDispatch();\n  const history = useHistory();\n  let columns = [\n    {\n      label: <strong>Image</strong>,\n      field: 'imageSrc',\n    },\n    {\n      label: <strong>Cart</strong>,\n      field: 'name'\n    },\n    {\n      label: <strong>Size</strong>,\n      field: 'size'\n    },\n    {\n      label: <strong>Price</strong>,\n      field: 'price'\n    },\n    {\n      label: <strong>Quantity</strong>,\n      field: 'quantity'\n    },\n    {\n      label: <strong>Amount</strong>,\n      field: 'amount'\n    },\n    {\n      label: <strong>Delete</strong>,\n      field: 'button'\n    }\n  ]\n\n  let total = 0;\n  let rows = []\n  if (data.products) {\n    if (data.products[0] !== null) {\n      data.products.forEach((value, index) => {\n        let totalPrice = 0\n        totalPrice = parseFloat(data.description[index].quantity) * roundOff(parseFloat(value.price))\n        total += roundOff(totalPrice)\n        rows.push(\n          {\n            'imageSrc': <img src={`/assets/${value.type}/${value.image}`} alt=\"\" style={{ width: \"50px\" }} />,\n            'name': <strong> {value.name}</strong>,\n            'size': <strong> {data.description[index].size} </strong>,\n            'price': <strong> £ {roundOff(value.price)} </strong>,\n            'quantity':\n              <input name=\"quantity\" value={data.description[index].quantity} className=\"specialInput border-warning\" style={{ width: \"100px\" }} onChange={(evt) => { handleInputChange(evt, index) }} />,\n            'amount': <strong> £ {totalPrice}</strong>,\n            'button':\n              <MDBIcon far icon=\"times-circle\" className=\"amber-text\" onClick={() => { deleteCart(index) }} />\n\n            // <MDBBtn outline color=\"amber\" size=\"sm\" onClick={() => { deleteCart(index) }}>\n            //   X\n            // </MDBBtn>\n          }\n        )\n      });\n    }\n  }\n  useEffect(() => {\n    // fetch Data\n    async function fetchData() {\n      await dispatch(fetchCart()).unwrap()\n      // if (originalPromiseResult.cart)\n      //   setData(originalPromiseResult.cart)\n    }\n\n    let controller = new AbortController();\n    try {\n      fetchData()\n    } catch (rejectedValueOrSerializedError) {\n      console.log({ failed: rejectedValueOrSerializedError })\n    }\n    return () => {\n      controller?.abort();\n\n    }\n  }, [data.length])\n  let handleInputChange = async (event, index) => {\n    let quantity = parseInt(event.target.value);\n    let size = data.description[index].size\n    index = parseInt(index)\n    if (quantity <= 0) {\n      alert(\"value cannot be less than zero\");\n    }\n    else {\n      let body = { size, quantity }\n      let productId = data.products[index]._id\n      // console.log({ size, quantity, productId })\n      let returnValue = await dispatch(editProduct({ productId, index, body })).unwrap()\n      console.log(returnValue)\n\n    }\n  }\n  let checkOut = async (totalPurchase) => {\n    if (rows.length === 0 && totalPurchase > 0) {\n      alert(\"Purchase an item first!\");\n    }\n    else {\n      let returnValue = await dispatch(editProfile({ body: { totalPurchase } })).unwrap()\n      console.log(returnValue)\n      history.replace(\"/checkOut\")\n    }\n  }\n\n  let deleteCart = (index) => {\n    dispatch(deleteProduct(index))\n  }\n\n  return (\n    <div style={{ minHeight: \"100vh\" }}>\n      <MDBRow className=\"my-2 special-margin\" center>\n        <MDBCard style={{ marginTop: \"50px\" }}>\n          <MDBCardBody>\n\n            <h3 className=\"text-warning my-2 text-center\"> Shopping Cart </h3>\n            {/* Table */}\n            <br />\n            <MDBTable className=\"product-table d-none d-lg-table w-80\">\n              <MDBTableHead className=\"form-control font-weight-bold\" color=\"amber lighten-5\" columns={columns} />\n              <MDBTableBody rows={rows} />\n            </MDBTable>\n\n            {/* Table */}\n            <div className=\"px-3\">\n              <div  className=\"d-grid d-lg-none w-80 border border-warning py-2\"\n                style={{\n                  display: \"grid \", gridTemplateColumns: \"0.5fr 1fr 3fr 1fr\", justifyContent: \"center\",\n                  alignItems: \"center\", background: \"#FFF8E1\"\n\n                }}\n              >\n                <span\n                >\n                  \n                </span>\n                <span>\n                  Image\n                </span>\n                <span>\n                  Name\n                </span>\n                <div\n                  className=\"mx-auto\"\n                >\n                </div>\n              </div>\n              {\n                data.products &&\n                data.products[0] !== null &&\n                rows.map((val, index) => {\n\n                  return (\n                    <Fragment key={`${val}${index}}`} >\n                      <div onClick={toggleCollapse(index)} className=\"d-grid d-lg-none w-80 border-top border-bottom border-warning py-2\"\n                        style={{\n                          display: \"grid \", gridTemplateColumns: \"0.5fr 1fr 3fr 1fr\", justifyContent: \"center\",\n                          alignItems: \"center\"\n\n                        }}\n                      >\n                        <span\n                        >\n                          <  MDBIcon icon=\"angle-down\" />\n                        </span>\n                        <span>\n                          {val.imageSrc}\n                        </span>\n                        <span>\n                          {val.name}\n\n                        </span>\n                        <div\n                          className=\"mx-auto\"\n                        >\n                          <MDBIcon far icon=\"times-circle\" onClick={() => { deleteCart(index) }} />\n                        </div>\n                      </div>\n                      <MDBCollapse id=\"basicCollapse\" isOpen={collapse[index]} className=\"py-3 align-items-around\" style={{ height: \"130px\" }}>\n                        <div className=\"pl-5 ml-5\">\n                          <strong> Size: {val.size} </strong>\n                          <br />\n                          <strong> Price: {val.price} </strong>\n                          <br />\n                          <strong> Quantity {val.quantity} </strong>\n                          <br />\n                          <strong> {val.amount}</strong>\n                        </div>\n                      </MDBCollapse>\n                    </Fragment>\n                  )\n                }\n                )\n              }\n            </div>\n            {\n              !data.products ||\n              data.products[0] === null &&\n              <div style={{ textAlign: \"center\", marginTop: \"10px\" }}>\n                Added nothing to cart !\n              </div>\n\n            }\n            {\n\n              data.products &&\n              data.products[0] !== null &&\n              <div className=\"pr-5\">\n                <div className=\"mt-3 d-flex justify-content-end\">\n                  <strong>TOTAL : &nbsp;</strong>\n                  <strong className=\"ml-4\">{roundOff(total)}</strong>\n                </div>\n              </div>\n            }\n          </MDBCardBody>\n\n\n\n          <MDBCardBody>\n            <div className=\"mb-3\">\n              <div className=\"pt-1\">\n                <p className=\"text-amber lighten-1 mb-0\"><i className=\"fas fa-info-circle mr-1\"></i> Do not delay the purchase, adding\n                  items to your cart does not mean booking them.</p>\n                {/* <Redirect to=\"/checkOut\"> */}\n                <div className=\"mb-3\">\n                  <MDBBtn onClick={() => { checkOut(total) }} outline color=\"amber lighten-1\">Check Out</MDBBtn>\n                </div>\n                {/* </Redirect> */}\n              </div>\n            </div>\n\n            <div className=\"mb-3\">\n              <div className=\"pt-2\">\n                <p className=\"mb-1\">We accept the following payment methods:</p>\n                <img className=\"mr-2\" width=\"30px\"\n                  src=\"https://mdbootstrap.com/wp-content/plugins/woocommerce-gateway-stripe/assets/images/visa.svg\"\n                  alt=\"Visa\" />\n                <img className=\"mr-2\" width=\"30px\"\n                  src=\"https://mdbootstrap.com/wp-content/plugins/woocommerce-gateway-stripe/assets/images/amex.svg\"\n                  alt=\"American Express\" />\n                <img className=\"mr-2\" width=\"30px\"\n                  src=\"https://mdbootstrap.com/wp-content/plugins/woocommerce-gateway-stripe/assets/images/mastercard.svg\"\n                  alt=\"Mastercard\" />\n                <img className=\"mr-2\" width=\"30px\"\n                  src=\"https://mdbootstrap.com/wp-content/plugins/woocommerce/includes/gateways/paypal/assets/images/paypal.png\"\n                  alt=\"PayPal acceptance mark\" />\n              </div>\n            </div>\n\n\n          </MDBCardBody>\n        </MDBCard>\n      </MDBRow>\n    </div >\n  );\n}\n\n\n","/home/ridwan/Projects/football-shop-mern-frontend/src/pages/Listing.js",["168"],"import React, { useEffect } from 'react'\nimport EcommerceGridVertical from '../components/EcommerceGridVertical'\nimport Overlay from '../components/Overlay'\nimport JerseyImg from \"../assets/Jerseys.jpg\"\nimport AccessoriesImg from \"../assets/Accessories.jpg\"\nimport BootsImg from \"../assets/Boots.jpg\"\nimport { useDispatch, useSelector } from 'react-redux'\nimport { fetchAll, selectProducts } from '../redux/slices/ProductSlice'\nimport { useParams } from 'react-router-dom'\n\nfunction JerseysPartTwo() {\n\n    const { userPath, productName } = useParams();\n    console.log({ userPath, productName})\n\n    let elem = useSelector(selectProducts)\n    const dispatch = useDispatch()\n    useEffect(() => {\n        let controller = new AbortController();\n        async function fetchData() {\n            try {\n                const originalPromiseResult = await dispatch(fetchAll(productName)).unwrap()\n                if (originalPromiseResult.product)\n                    console.log({ okay: originalPromiseResult })\n            } catch (rejectedValueOrSerializedError) {\n                console.log({ failed: rejectedValueOrSerializedError })\n            }\n        }\n\n        fetchData()\n\n        return () => {\n            return () => controller?.abort();\n        }\n    }, [elem.length])\n\n    const description = {\n        jerseys : {\n            img: JerseyImg,\n            h1:  \"THE HEROES\",\n            h2: \"OF OLD\"\n        },\n        boots : {\n            img: BootsImg,\n            h1:  \"PREMIUM QUALITY\",\n            h2: \"BOOTS AND FOOTWEAR\"\n        },\n        accessories : {\n            img: AccessoriesImg,\n            h1:  \"THE VERY BEST\",\n            h2: \"FOOTBALL ACCESSORIES\"\n        },\n\n    }\n\n    return (\n        <div>\n            <Overlay imgSrc={description[productName]['img']} alt={productName} >\n                <h1>{description[productName]['h1']}</h1>\n                <h2>{description[productName]['h2']}</h2>\n            </Overlay>\n            <EcommerceGridVertical product={productName} data={elem} />\n        </div>\n    )\n}\n\nexport default JerseysPartTwo\n","/home/ridwan/Projects/football-shop-mern-frontend/src/pages/Description.js",["169"],"import React, { Fragment, useState, useEffect } from 'react'\nimport { Link, useParams } from 'react-router-dom'\nimport { MDBBreadcrumb, MDBBreadcrumbItem, MDBCol, MDBContainer, MDBRow, MDBBtn } from \"mdbreact\";\nimport \"./Description.css\"\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addProduct } from \"../redux/slices/CartSlice\";\nimport { fetchProduct, selectCurrentProduct } from '../redux/slices/ProductSlice';\nimport { cookieKey } from '../api/env';\nimport { getCookie } from '../api/api';\n\nconst BreadcrumbPage = ({ type, productName, productid }) => {\n    return (\n        <MDBContainer className=\"mt-2 pt-4 mb-0\">\n            <MDBBreadcrumb style={{ backgroundColor: \"transparent\" }} >\n                <MDBBreadcrumbItem >\n                    <Link to=\"/\" className=\"text-warning font-weight-bold\"> Home </Link>\n                </MDBBreadcrumbItem>\n                <MDBBreadcrumbItem className=\"text-capitalize\">\n                    <Link to={`/${type.toLowerCase()}`} className=\"text-warning font-weight-bold\">\n                        {type}\n                    </Link>\n                </MDBBreadcrumbItem>\n                <MDBBreadcrumbItem >\n                    <Link to={`/${type.toLowerCase()}/${productid}`} className=\"text-warning font-weight-bold\">\n                        {productName}\n                    </Link>\n                </MDBBreadcrumbItem>\n            </MDBBreadcrumb>\n        </MDBContainer>\n    );\n};\n\nfunction generateProductAd(productNameForAdd) {\n    let productAd = \"\";\n    if (productNameForAdd === \"boots\") {\n        productAd = \"Stylish boots| Great coomfort and support| Synthetic | Split grooves \"\n    }\n    else if (productNameForAdd === \"jerseys\") {\n        productAd = \"Super-premium fabric| Lycra sleeves | Side Mesh | Silicon Elastic Bottom Grip| Customizable\"\n    }\n    else {\n        productAd = \"Premium quality accessories| Exported from the best places\"\n    }\n    return productAd\n}\n// 1. Variable must be in a different function\n// 2. Variable must be in a different component\n// 3. Try to find patterns and replicate documentation\n// instead of creativity.\n// Because often only a particular pattern works \n\n// Your natural program flow is not important\n// Documentation structure and flow is more important\n/* DERIVED STATE FROM PROPS? NO NEED */\n/* DERIVED STATE FROM PROPS? */\n\n\n\n// let productAd= generateProductAd(product)\n//  product is product's name\n/*\n    name, price, imageSrc, type\n    inputs: rate, size, quantity\n*/\nfunction DescriptionPartTwo() {\n\n    const { userPath } = useParams();\n    console.log({ userPath })\n    let product = useSelector(selectCurrentProduct)\n    let [cartStateToReducer, setCartStateToReducer] = useState({\n        // INPUT\n        rate: 0,\n        size: \"SM\",\n        quantity: 1\n        // INPUT\n    })\n\n    console.log(\"okay\")\n\n    let handleInputChange = (event) => {\n        console.log({ product })\n\n        const target = event.target;\n        let value = target.value;\n        value = (Object.is(parseInt(value), NaN)) ? value : parseInt(value);\n        const name = target.name;\n        if (name === \"quantity\" && (value === null || value === undefined)) {\n            return;\n        }\n        else if (name === \"quantity\" && value < 0) {\n            alert(\"Value can't be less than zero\")\n            return;\n        }\n        setCartStateToReducer({\n            ...cartStateToReducer,\n            [name]: value\n        });\n    }\n\n    const dispatch = useDispatch();\n\n    let addToCart = async () => {\n        let size = document.querySelector('select[name=size]').value\n        let quantity = parseFloat(document.querySelector('input[name=quantity]').value)\n        let body = { size, quantity }\n        console.log({ size, quantity })\n\n        if (cartStateToReducer.quantity > 0) {\n            \n            const token = getCookie(cookieKey)\n            if (token === \"null\" || token === null || token === undefined) {\n\n                alert(\"Sign in first!\")\n                return \"\";\n            }\n            else {\n                alert(\"Added to cart.\")\n                await dispatch(addProduct({productId: userPath, body }))\n\n            }\n            \n        }\n        else {\n            alert(\"Quantity can't be less than zero\")\n        }\n    }\n\n\n    useEffect(() => {\n        // fetch Data\n        async function fetchData() {\n            console.log(\"okay\")\n            const originalPromiseResult = await dispatch(fetchProduct(userPath)).unwrap()\n            console.log({ okay: originalPromiseResult.product })\n            // if (typeof originalPromiseResult.product !== undefined) {\n            //     setProduct(originalPromiseResult.product)\n            //     setCartStateToReducer({ rate: product.ratings, size: product.size, quantity: 1 })\n            // }\n            // else {\n            //     setProduct({})\n            // }\n        }\n        // S0 CAN ACCESS ENTIRE PAGE\n        let cartIcon = document.querySelector('.cart-icon')\n        cartIcon.classList.add('glow-icon')\n        window.setTimeout(() => {\n            cartIcon.classList.remove('glow-icon')\n        }, 3000)\n\n        let controller = new AbortController();\n        try {\n            fetchData()\n        } catch (rejectedValueOrSerializedError) {\n            console.log({ failed: rejectedValueOrSerializedError })\n        }\n        return () => {\n            controller?.abort();\n\n        }\n    }, [product.name, userPath])\n\n    return (\n        // Interpreter thinks that you return undefined and doesn't \n        // check your next line. That's the return operator thing.\n        // Put your opened bracket on the same line with the return.\n        <Fragment>\n            {product.name !== undefined &&\n                < div style={{ marginTop: \"-80px\" }}>\n                    <br />\n                    <BreadcrumbPage type={product.type} productName={product.name} productid={product._id} />\n                    <MDBContainer className=\"pt-0\">\n                        <MDBRow style={{ marginTop: 0, paddingTop: 0 }} className=\"pt-0\">\n                            <MDBCol xs=\"12\" lg=\"6\" className=\"col-xs-12-imageWraper\" >\n                                <img src={`/assets/${product.type}/imageL${product.image.substring(5)}`} alt={`${product.name}`}\n                                    className=\"description-img frame\"\n                                />\n                            </MDBCol>\n                            <MDBCol xs=\"12\" lg=\"6\">\n                                <div className=\"special-font font-weight-bold mq-center\">\n                                    <h5 className=\"font-weight-bold \">\n                                        {product.name}\n                                    </h5>\n                                    <h5 className=\"font-weight-bold \">\n                                        {product.price}\n                                    </h5>\n                                    <div className=\"rate\" onChange={(evt) => { handleInputChange(evt) }}>\n                                        <input type=\"radio\" id=\"star5\" name=\"rate\" value=\"5\" />\n                                        <label htmlFor=\"star5\" title=\"text\">5 stars</label>\n                                        <input type=\"radio\" id=\"star4\" name=\"rate\" value=\"4\" />\n                                        <label htmlFor=\"star4\" title=\"text\">4 stars</label>\n                                        <input type=\"radio\" id=\"star3\" name=\"rate\" value=\"3\" />\n                                        <label htmlFor=\"star3\" title=\"text\">3 stars</label>\n                                        <input type=\"radio\" id=\"star2\" name=\"rate\" value=\"2\" />\n                                        <label htmlFor=\"star2\" title=\"text\">2 stars</label>\n                                        <input type=\"radio\" id=\"star1\" name=\"rate\" value=\"1\" />\n                                        <label htmlFor=\"star1\" title=\"text\">1 star</label>\n                                    </div>\n                                </div>\n                                <br />\n                                <hr />\n                                <br />\n                                <div className=\"special-font\">\n                                    <p>\n                                        Premium quality {product.type}\n                                    </p>\n                                    <p> {generateProductAd(product.type)}</p>\n                                    <br />\n                                    <p className=\"text\">\n                                        Please cross-check your size with the size chart to ensure a good fit.\n                                        <br />\n\n                                    </p>\n                                </div>\n\n                                <br />\n                                <table>\n                                    <tbody >\n                                        <tr className=\"mb-4\">\n                                            <td className=\"text-left ml-0 px-0\">\n                                                <span>SIZE: </span>\n                                            </td>\n                                            <td>\n                                                {product.type !== \"accessories\" &&\n                                                    <select className=\"form-control\" style={{ width: \"100px\" }} onChange={(evt) => { handleInputChange(evt) }} name=\"size\">\n                                                        <option>SM</option>\n                                                        <option>L</option>\n                                                        <option>XL</option>\n                                                        <option>XXL</option>\n                                                    </select>\n                                                }\n                                                {product.type === \"accessories\" &&\n                                                    <select className=\"form-control\" style={{ width: \"100px\" }} onChange={(evt) => { handleInputChange(evt) }} name=\"size\">\n                                                        <option>Standard</option>\n                                                    </select>\n                                                }\n                                            </td>\n                                        </tr>\n                                        <br />\n                                        <tr>\n                                            <td className=\"text-left ml-0 px-0\">\n                                                <span>QUANTITY: </span>\n                                            </td>\n                                            <td>\n                                                <input type=\"number\" name=\"quantity\" style={{ width: \"100px\" }} value={cartStateToReducer.quantity} className=\"form-control\" onChange={(evt) => { handleInputChange(evt) }} />,\n                                                {/* <MDBInput type=\"number\" name=\"quantity\" default={sentObject.qty} className=\"form-control\" style={{ width: \"80px\" }} onChange={(evt) => { handleInputChange(evt) }} />, */}\n                                            </td>\n                                        </tr>\n                                    </tbody>\n\n                                </table>\n                                <br />\n                                <br />\n                                <MDBBtn outline color=\"amber\" className=\"mx-auto\" onClick={addToCart}>ADD TO CART</MDBBtn>\n\n                            </MDBCol>\n                        </MDBRow>\n\n                        <MDBRow>\n                            <MDBCol >\n                            </MDBCol>\n                            <MDBCol xs=\"12\" lg=\"6\">\n                                <i>\n                                    Note: Your Product will be dispatched/ shipped within 7-10 days\n                                </i>\n                            </MDBCol>\n                        </MDBRow>\n                    </MDBContainer>\n                </div>\n            }\n        </Fragment>\n    )\n}\n\nexport default DescriptionPartTwo\n","/home/ridwan/Projects/football-shop-mern-frontend/src/components/EcommerceGridVertical.js",["170"],"import React, { useState, useEffect, Fragment } from 'react'\nimport { MDBBtn, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle,  MDBTooltip} from 'mdbreact';\nimport { NavLink } from 'react-router-dom';\nimport \"../components/EcommerceGridVertical.css\"\n// JS for loop doesnt work inside html\n\nfunction EcommerceGridVertical({ product, data }) {\n    let [begin, setBegin] = useState(0);\n    let length = 16;\n    let dataLength = data.length;\n    let increment = (multiplier) => {\n        setBegin((prev) => {\n            let prev2 = prev\n            prev2 = prev2 + (length * parseInt(multiplier))\n            if (prev2 < 0) {\n                prev2 = 0;\n            }\n            if (prev2 >= dataLength) {\n                prev2 = dataLength - length;\n            }\n            return prev2;\n        });\n    }\n    /// Pagination\n    let num = Math.ceil(parseInt(dataLength) / parseInt(length));\n    let arr = [];\n    for (var i = 0; i < num; i++) {\n        arr.push(i)\n    }\n    console.log({updated: true, begin})\n\n    return (\n        <Fragment>\n            <div>\n                <h1 className=\"text-center text-uppercase font-weight-bolder text-warning my-5 py-3\"> Our {product} </h1>\n                <div className=\"loadGrid__gridItems\">\n                    {\n                        data !== null &&\n                        data.map((value, index) => {\n                            if (  index<begin || index>= length+begin ) return null\n                            else return (\n                                <Fragment key={`${index}${value._id}`}>\n                                    <MDBCard className=\"px-0 mx-0\" style={{ border: \"1px solid gold\" }}>\n\n                                        <NavLink to={`/${product}/${value._id}`} className=\"image-hyperlink\">\n                                            <MDBCardImage className=\"card-image\" src={`/assets/${product}/image${index}.jpg`} alt={`image${index}`} waves />\n\n                                            <MDBCardBody className=\"d-flex flex-column justify-content-center align-items-center\">\n                                                <MDBCardTitle >\n                                                    <MDBTooltip\n                                                        domElement tag=\"span\"\n                                                        placement=\"top\"\n                                                    >\n                                                        <p className=\"card-text-custom text\"> {value.name} </p>\n                                                        <span> {value.name} </span>\n                                                    </MDBTooltip>\n                                                </MDBCardTitle>\n                                                <p className=\"card-text-custom text-bold\">\n                                                    {value.price}\n                                                </p>\n                                            </MDBCardBody>\n                                        </NavLink>\n                                    </MDBCard>\n                                </Fragment>\n                            )\n                        })\n                    }\n                </div>\n                <div className=\"divBtnOutline text-center py-5\">\n                    <MDBBtn\n                        onClick={\n                            () => increment(-1)\n                        }\n                    > Prev </MDBBtn>\n                    {\n                        arr.map((value) => {\n                            return (\n                                <MDBBtn key={`${value}button`} onClick={() => {\n                                    setBegin(length * value)\n                                }\n                                }>\n                                    {value + 1}\n                                </MDBBtn>\n                            )\n                        }\n                        )\n                    }\n                    <MDBBtn\n                        onClick={\n                            () => increment(1)\n                        }> Next </MDBBtn>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default EcommerceGridVertical\n","/home/ridwan/Projects/football-shop-mern-frontend/src/redux/slices/ProfileSlice.js",[],"/home/ridwan/Projects/football-shop-mern-frontend/src/redux/slices/CartSlice.js",[],"/home/ridwan/Projects/football-shop-mern-frontend/src/redux/slices/ProductSlice.js",[],"/home/ridwan/Projects/football-shop-mern-frontend/src/redux/slices/NotificationSlice.js",[],"/home/ridwan/Projects/football-shop-mern-frontend/src/helper/roundOff.js",[],"/home/ridwan/Projects/football-shop-mern-frontend/src/redux/store.js",[],{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","severity":1,"message":"176","line":19,"column":6,"nodeType":"177","endLine":19,"endColumn":8,"suggestions":"178"},{"ruleId":"179","severity":1,"message":"180","line":13,"column":9,"nodeType":"181","messageId":"182","endLine":13,"endColumn":16},{"ruleId":"183","severity":1,"message":"184","line":22,"column":5,"nodeType":"185","messageId":"186","endLine":22,"endColumn":34},{"ruleId":"183","severity":1,"message":"184","line":30,"column":5,"nodeType":"185","messageId":"186","endLine":30,"endColumn":33},{"ruleId":"183","severity":1,"message":"184","line":50,"column":5,"nodeType":"185","messageId":"186","endLine":50,"endColumn":32},{"ruleId":"179","severity":1,"message":"187","line":2,"column":70,"nodeType":"181","messageId":"182","endLine":2,"endColumn":80},{"ruleId":"179","severity":1,"message":"188","line":2,"column":90,"nodeType":"181","messageId":"182","endLine":2,"endColumn":97},{"ruleId":"183","severity":1,"message":"184","line":15,"column":5,"nodeType":"185","messageId":"186","endLine":15,"endColumn":33},{"ruleId":"175","severity":1,"message":"189","line":89,"column":8,"nodeType":"177","endLine":89,"endColumn":31,"suggestions":"190"},{"ruleId":"183","severity":1,"message":"184","line":17,"column":5,"nodeType":"185","messageId":"186","endLine":17,"endColumn":34},{"ruleId":"183","severity":1,"message":"184","line":27,"column":5,"nodeType":"185","messageId":"186","endLine":27,"endColumn":33},{"ruleId":"183","severity":1,"message":"184","line":49,"column":5,"nodeType":"185","messageId":"186","endLine":49,"endColumn":32},{"ruleId":"183","severity":1,"message":"184","line":93,"column":5,"nodeType":"185","messageId":"186","endLine":93,"endColumn":22},{"ruleId":"179","severity":1,"message":"191","line":2,"column":78,"nodeType":"181","messageId":"182","endLine":2,"endColumn":84},{"ruleId":"179","severity":1,"message":"192","line":3,"column":23,"nodeType":"181","messageId":"182","endLine":3,"endColumn":34},{"ruleId":"179","severity":1,"message":"193","line":4,"column":10,"nodeType":"181","messageId":"182","endLine":4,"endColumn":20},{"ruleId":"179","severity":1,"message":"194","line":4,"column":35,"nodeType":"181","messageId":"182","endLine":4,"endColumn":44},{"ruleId":"195","severity":1,"message":"196","line":35,"column":9,"nodeType":"181","messageId":"197","endLine":35,"endColumn":13},{"ruleId":"195","severity":1,"message":"196","line":42,"column":9,"nodeType":"181","messageId":"197","endLine":42,"endColumn":13},{"ruleId":"179","severity":1,"message":"198","line":58,"column":9,"nodeType":"181","messageId":"182","endLine":58,"endColumn":17},{"ruleId":"179","severity":1,"message":"199","line":177,"column":7,"nodeType":"181","messageId":"182","endLine":177,"endColumn":24},{"ruleId":"179","severity":1,"message":"200","line":195,"column":7,"nodeType":"181","messageId":"182","endLine":195,"endColumn":15},{"ruleId":"179","severity":1,"message":"201","line":206,"column":7,"nodeType":"181","messageId":"182","endLine":206,"endColumn":17},{"ruleId":"202","severity":1,"message":"203","line":294,"column":24,"nodeType":"204","messageId":"205","endLine":294,"endColumn":26},{"ruleId":"202","severity":1,"message":"203","line":295,"column":35,"nodeType":"204","messageId":"205","endLine":295,"endColumn":37},{"ruleId":"179","severity":1,"message":"206","line":4,"column":44,"nodeType":"181","messageId":"182","endLine":4,"endColumn":55},{"ruleId":"179","severity":1,"message":"187","line":4,"column":65,"nodeType":"181","messageId":"182","endLine":4,"endColumn":75},{"ruleId":"183","severity":1,"message":"184","line":22,"column":5,"nodeType":"185","messageId":"186","endLine":22,"endColumn":33},{"ruleId":"175","severity":1,"message":"207","line":86,"column":8,"nodeType":"177","endLine":86,"endColumn":43,"suggestions":"208"},{"ruleId":"175","severity":1,"message":"209","line":108,"column":6,"nodeType":"177","endLine":108,"endColumn":19,"suggestions":"210"},{"ruleId":"202","severity":1,"message":"203","line":227,"column":30,"nodeType":"204","messageId":"205","endLine":227,"endColumn":32},{"ruleId":"202","severity":1,"message":"203","line":228,"column":41,"nodeType":"204","messageId":"205","endLine":228,"endColumn":43},{"ruleId":"175","severity":1,"message":"211","line":35,"column":8,"nodeType":"177","endLine":35,"endColumn":21,"suggestions":"212"},{"ruleId":"175","severity":1,"message":"209","line":160,"column":8,"nodeType":"177","endLine":160,"endColumn":32,"suggestions":"213"},{"ruleId":"179","severity":1,"message":"214","line":1,"column":27,"nodeType":"181","messageId":"182","endLine":1,"endColumn":36},"no-native-reassign",["215"],"no-negated-in-lhs",["216"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'state'. Either include them or remove the dependency array.","ArrayExpression",["217"],"no-unused-vars","'history' is assigned a value but never used.","Identifier","unusedVar","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'MDBTabPane' is defined but never used.","'MDBIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'user.addressFirst', 'user.addressSecond', and 'user.creditCardCVV'. Either include them or remove the dependency array.",["218"],"'MDBBtn' is defined but never used.","'useSelector' is defined but never used.","'selectCart' is defined but never used.","'fetchCart' is defined but never used.","no-redeclare","'copy' is already defined.","redeclared","'dispatch' is assigned a value but never used.","'handleInputChange' is assigned a value but never used.","'checkOut' is assigned a value but never used.","'deleteCart' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'MDBCardBody' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'user.addressFirst', 'user.addressSecond', and 'user.creditCardCVV'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setInput' needs the current value of 'user.addressFirst'.",["219"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["220"],"React Hook useEffect has missing dependencies: 'dispatch' and 'productName'. Either include them or remove the dependency array.",["221"],["222"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},"Update the dependencies array to be: [dispatch, history, state]",{"range":"235","text":"236"},"Update the dependencies array to be: [dispatch, user.addressFirst, user.addressSecond, user.creditCardCVV, user.creditCardNumber]",{"range":"237","text":"238"},"Update the dependencies array to be: [user.creditCardNumber, isSignedIn, dispatch, user.addressFirst, user.addressSecond, user.creditCardCVV]",{"range":"239","text":"240"},"Update the dependencies array to be: [data.length, dispatch]",{"range":"241","text":"242"},"Update the dependencies array to be: [dispatch, elem.length, productName]",{"range":"243","text":"244"},"Update the dependencies array to be: [dispatch, product.name, userPath]",{"range":"245","text":"246"},[621,623],"[dispatch, history, state]",[2709,2732],"[dispatch, user.addressFirst, user.addressSecond, user.creditCardCVV, user.creditCardNumber]",[2774,2809],"[user.creditCardNumber, isSignedIn, dispatch, user.addressFirst, user.addressSecond, user.creditCardCVV]",[3275,3288],"[data.length, dispatch]",[1268,1281],"[dispatch, elem.length, productName]",[5417,5441],"[dispatch, product.name, userPath]"]